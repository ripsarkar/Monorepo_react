(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.react_app_rewire_babel_loader = {})));
}(this, (function (exports) {

var ref = require("react-app-rewired");
var getBabelLoader = ref.getBabelLoader;
var getArray = function (source) {
    if (!source) {
        return [];
    }
    return Array.isArray(source) ? source : [source];
};
var include = function (config) {
    var includes = [], len = arguments.length - 1;
    while ( len-- > 0 ) includes[ len ] = arguments[ len + 1 ];

    var babel_loader = getBabelLoader(config.module.rules);
    var include_config = getArray(babel_loader.include);
    includes = includes.reduce(function (accumulator, include) {
        if (Array.isArray(include)) {
            return accumulator.concat(include);
        }
        accumulator.push(include);
        return accumulator;
    }, include_config);
    babel_loader.include = includes;
    return config;
};
var exclude = function (config) {
    var excludes = [], len = arguments.length - 1;
    while ( len-- > 0 ) excludes[ len ] = arguments[ len + 1 ];

    var babel_loader = getBabelLoader(config.module.rules);
    var exclude_config = getArray(babel_loader.exclude);
    excludes = excludes.reduce(function (accumulator, exclude) {
        if (Array.isArray(exclude)) {
            return accumulator.concat(exclude);
        }
        accumulator.push(exclude);
        return accumulator;
    }, exclude_config);
    babel_loader.exclude = excludes;
    return config;
};

exports.include = include;
exports.exclude = exclude;

})));
//# sourceMappingURL=index.umd.js.map
